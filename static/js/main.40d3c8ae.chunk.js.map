{"version":3,"sources":["components/botAvatar/FlightBotAvatar.jsx","components/Todos/Todos.jsx","configs/chatbotConfig.js","chatbot/MessageParser.js","chatbot/ActionProvider.js","App.js","reportWebVitals.js","index.js"],"names":["FlightBotAvatar","className","Todos","props","console","log","setState","useEffect","fetch","then","res","json","data","fiveFirstTodos","slice","state","todos","map","todo","i","title","id","config","initialMessages","createChatBotMessage","botName","customComponents","botAvatar","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","mapStateToProps","MessageParser","actionProvider","this","message","lowercase","toLowerCase","includes","helloWorldHandler","todosHandler","ActionProvider","setStateFunc","createClientMessage","stateRef","createCustomMessage","widget","setChatbotMessage","prev","messages","App","messageParser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAWeA,EARS,WACpB,OACI,qBAAKC,UAAU,mBAAf,gBC6BOC,G,MA/BD,SAACC,GACXC,QAAQC,IAAI,cAAeF,GAE3B,IAAQG,EAAaH,EAAbG,SAERC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACH,IAAMC,EAAiBD,EAAKE,MAAM,EAAG,GACrCR,GAAS,SAACS,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBC,MAAOH,YAEjD,IAUH,OACI,qBAAKZ,UAAU,eAAf,SACI,oBAAIA,UAAU,oBAAd,SATJE,EAAMa,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACZ,qBAAIlB,UAAU,yBAAd,eACOiB,EAAKE,QADgCF,EAAKG,aCgB9CC,EA7BA,CACXC,gBAAiB,CAACC,+BAAqB,gBACvCC,QAAS,WACTC,iBAAkB,CACdC,UAAW,SAACxB,GAAD,OAAW,cAAE,EAAF,eAAsBA,MAGhDyB,aAAc,CAEVC,cAAe,CACXC,gBAAiB,UAGrBC,WAAY,CACRD,gBAAiB,WAGzBf,MAAO,CACHC,MAAO,IAEXgB,QAAS,CACL,CACIC,WAAY,QACZC,WAAY,SAAC/B,GAAD,OAAW,cAAC,EAAD,eAAWA,KAClCgC,gBAAiB,CAAC,Y,cCXfC,E,WAjBX,WAAYC,EAAgBtB,GAAQ,oBAChCuB,KAAKD,eAAiBA,EACtBC,KAAKvB,MAAQA,E,yCAGjB,SAAMwB,GACF,IAAMC,EAAYD,EAAQE,cACtBD,EAAUE,SAAS,UACnBJ,KAAKD,eAAeM,oBAGrBH,EAAUE,SAAS,UAClBJ,KAAKD,eAAeO,mB,YC0BjBC,E,WAtCX,WACIrB,EACAsB,EACAC,EACAC,EACAC,GAED,IAAD,gCAcFL,aAAe,WACX,IAAML,EAAU,EAAKf,qBAAqB,0BAA2B,CACjE0B,OAAQ,UAEZ,EAAKC,kBAAkBZ,IAjBvBD,KAAKd,qBAAuBA,EAC5Bc,KAAKhC,SAAWwC,EAChBR,KAAKS,oBAAsBA,EAC3BT,KAAKU,SAAWA,EAChBV,KAAKW,oBAAsBA,E,qDAG/B,WACI,IAAMV,EAAUD,KAAKd,qBAAqB,4BAE1Cc,KAAKa,kBAAkBZ,K,+BAU3B,SAAkBA,GAGdD,KAAKhC,UAAS,SAAC8C,GAAD,mBAAC,eACRA,GADO,IAEVC,SAAS,GAAD,mBAAMD,EAAKC,UAAX,CAAqBd,a,KCb1Be,MAZf,WACE,OACE,qBAAKrD,UAAU,MAAf,SACE,cAAC,IAAD,CACEqB,OAAQA,EACRiC,cAAenB,EACfC,eAAgBQ,OCJTW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.40d3c8ae.chunk.js","sourcesContent":["import React from 'react'\nimport './FlightBotAvatar.css'\n\nconst FlightBotAvatar = () => {\n    return (\n        <div className=\"crazy-bot-avatar\">\n            C\n        </div>\n    )\n}\n\nexport default FlightBotAvatar","import React, { useEffect } from 'react'\nimport './Todos.css'\n\nconst Todos = (props) => {\n    console.log('props Todos', props)\n\n    const { setState } = props\n\n    useEffect(() => {\n        fetch(\"https://jsonplaceholder.typicode.com/todos\")\n            .then((res) => res.json())\n            .then((data) => {\n                const fiveFirstTodos = data.slice(0, 5);\n                setState((state) => ({ ...state, todos: fiveFirstTodos }))\n            })\n    }, [])\n\n    const renderTodos = () => (\n        props.todos.map((todo, i) => (\n            <li className=\"todos-widget-list-item\" key={todo.id}>\n                - {todo.title}\n            </li>\n        ))\n    )\n\n    return (\n        <div className=\"todos-widget\">\n            <ul className=\"todos-widget-list\">\n                {renderTodos()}\n            </ul>\n        </div>\n    )\n}\n\nexport default Todos","import React from 'react'\n// Config starter code\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport FlightBotAvatar from '../components/botAvatar/FlightBotAvatar'\nimport Todos from '../components/Todos/Todos.jsx'\n\nconst config = {\n    initialMessages: [createChatBotMessage(`Hello world`)],\n    botName: \"CrazyBot\",\n    customComponents: {\n        botAvatar: (props) => < FlightBotAvatar {...props} />,\n    },\n    // Defines an object of custom styles if you want to override styles\n    customStyles: {\n        // Overrides the chatbot message styles\n        botMessageBox: {\n            backgroundColor: \"purple\",\n        },\n        // Overrides the chat button styles\n        chatButton: {\n            backgroundColor: \"purple\",\n        },\n    },\n    state: {\n        todos: []\n    },\n    widgets: [\n        {\n            widgetName: \"todos\",\n            widgetFunc: (props) => <Todos {...props} />,\n            mapStateToProps: [\"todos\"],\n        }\n    ]\n}\n\nexport default config","// MessageParser starter code\nclass MessageParser {\n    constructor(actionProvider, state) {\n        this.actionProvider = actionProvider;\n        this.state = state;\n    }\n\n    parse(message) {\n        const lowercase = message.toLowerCase();\n        if (lowercase.includes('hello')) {\n            this.actionProvider.helloWorldHandler()\n        }\n\n        if(lowercase.includes(\"todos\")) {\n            this.actionProvider.todosHandler()\n        }\n    }\n}\n\nexport default MessageParser;\n","// ActionProvider starter code\nclass ActionProvider {\n    constructor(\n        createChatBotMessage,\n        setStateFunc,\n        createClientMessage,\n        stateRef,\n        createCustomMessage,\n        ...rest\n    ) {\n        this.createChatBotMessage = createChatBotMessage;\n        this.setState = setStateFunc;\n        this.createClientMessage = createClientMessage;\n        this.stateRef = stateRef;\n        this.createCustomMessage = createCustomMessage;\n    }\n\n    helloWorldHandler() {\n        const message = this.createChatBotMessage('Hello. Nice to meet you.');\n\n        this.setChatbotMessage(message)\n    }\n\n    todosHandler = () => {\n        const message = this.createChatBotMessage(\"sure. Here's your todos\", {\n            widget: 'todos'\n        });\n        this.setChatbotMessage(message)\n    }\n\n    setChatbotMessage(message) {\n        // const message = this.createChatBotmessage('Hello. Nice to meet you.');\n\n        this.setState((prev) => ({\n            ...prev,\n            messages: [...prev.messages, message],\n        }));\n    }\n}\n\nexport default ActionProvider;","import React from 'react'\nimport Chatbot from 'react-chatbot-kit'\nimport './App.css';\n\nimport 'react-chatbot-kit/build/main.css'\n\nimport config from \"./configs/chatbotConfig\";\nimport MessageParser from \"./chatbot/MessageParser\";\nimport ActionProvider from \"./chatbot/ActionProvider\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chatbot\n        config={config}\n        messageParser={MessageParser}\n        actionProvider={ActionProvider}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}